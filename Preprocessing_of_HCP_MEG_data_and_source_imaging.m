
%% == Initiate Brainstorm and protocol setup =============================
clc; clear;

cd '/media/jdscasta/Jason_drive/brainstorm3'

if ~brainstorm('status')
    brainstorm nogui % If brainstorm ain't running, run it with no GUI
end

% Create protocol; if it already exists, load it
omProtocol.name = 'TWININGs';
if exist('/media/jdscasta/Elements/TWININGs/', 'file') == 7
    omProtocol.index = bst_get('Protocol', omProtocol.name);
    bst_set('iProtocol', omProtocol.index);
    
else
    gui_brainstorm('CreateProtocol', omProtocol.name, 0, 0);
end

%% == Parameters =========================================================
% MEG datasets storage
mydirMEG = '/media/jdscasta/Elements/hcp/data/';

% Dir to save progress report
mydirBST = '/media/jdscasta/Elements/hcp/';

% Dir of database
mydirDB = '/media/jdscasta/Elements/hcp/data/';

% Frequencies to filter with the noth (power line 60Hz and harmonics)
freqs_notch = [60, 120, 180, 240, 300, 360, 420, 480, 540, 600];


% Filters
filt.highpass = 0.3;
filt.lowpass = 0.; % 0: no filter

filter_low.deltaLow = 1.;
filter_high.deltaHigh = 4.;
filter_low.thetaLow = 4.;
filter_high.thetaHigh = 8.;
filter_low.alphaLow = 8.;
filter_high.alphaHigh = 13.;
filter_low.betaLow = 13.;
filter_high.betaHigh = 30.;
filter_low.gammaLow = 30.;
filter_high.gammaHigh = 50.;
filter_low.hgammaLow = 50.;
filter_high.hgammaHigh = 150.;

% Window length and overlap for PSD Welch method
win_length = 2; % sec
win_overlap = 50; % percentage


% .mat files include variables to arrange the atlas into Yeo's RSN
load('/media/jdscasta/Jason_drive/omega_data/dependencies/desikan_scale33.mat');
load('/media/jdscasta/Jason_drive/omega_data/dependencies/rsn_mapping_yeo.mat');

%% == 1) Import dataset & anatomy =============================================

%% loop imports MRI data and MEg scans
SubjectNames = dir('/media/jdscasta/Elements/hcp/data/*');

SubjectNames= SubjectNames(3:97);

for i=2:95
    
    db_add_subject(SubjectNames(i,1).name)
    
    MRIFiles = ['/media/jdscasta/Elements2/hcp/data/', SubjectNames(i,1).name, '/T1w/', SubjectNames(i,1).name, '/'];
    RawFiles = ['/media/jdscasta/Elements2/hcp/data/', SubjectNames(i,1).name, '/MEG/1-Rnoise/4D/c,rfDC'];

    % Process: Import anatomy folder
    sFiles = bst_process('CallProcess', 'process_import_anatomy', [], [], ...
        'subjectname', SubjectNames(i,1).name, ...
        'mrifile',     {MRIFiles, 'FreeSurfer-fast'}, ...
        'nvertices',   15000);

    % Process: Create link to raw file
    sFiles = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
        'subjectname',    SubjectNames(i,1).name, ...
        'datafile',       {RawFiles, '4D'}, ...
        'channelreplace', 1, ...
        'channelalign',   1, ...
        'evtmode',        'value'); 
    
   RestFiles1 = ['/media/jdscasta/Elements2/hcp/data/', SubjectNames(i,1).name, '/MEG/3-Restin/4D/c,rfDC'];
   RestFiles2 = ['/media/jdscasta/Elements2/hcp/data/', SubjectNames(i,1).name, '/MEG/4-Restin/4D/c,rfDC'];
   RestFiles3 = ['/media/jdscasta/Elements2/hcp/data/', SubjectNames(i,1).name, '/MEG/5-Restin/4D/c,rfDC'];
   
   restFile={RestFiles1, RestFiles2,RestFiles3};
  
  % Process: Create link to raw file
    sFiles = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
        'subjectname',    SubjectNames(i,1).name, ...
        'datafile',       {restFile, '4D'}, ...
        'channelreplace', 1, ...
        'channelalign',   1, ...
        'evtmode',        'value'); 

end

    % Brainstorm gets confused when you do things with scripting, so
    % I'm reloading the database just in case
    db_reload_database('current')
    

%% Prepare iteration variables so the parfor can run
sSubjects = bst_get('ProtocolSubjects');
SubjectNames = {sSubjects.Subject.Name}';
nSubjects = (numel(SubjectNames)-2);

%% loop over empty rooms and filter data
for iSubject=[1:95]
    tic
    
    
    %% == 9) Preprocess empty room recordings ========================
    % Process: find the empty room recordings closest to this date
        % Process: select data
    sData = bst_process('CallProcess', 'process_select_files_data', ...
        [], [], 'subjectname',   SubjectNames{iSubject});
    
     sSubNoise = bst_process('CallProcess', 'process_select_tag', ...
        sData, [], ...
        'tag', '1-Rnoise', ...
        'search', 1, ...
        'select', 1);  % Select only the files with the tag
    
    
    % Process: Notch filter line noise
    sNoiseFilesNotch = bst_process('CallProcess', 'process_notch', ...
        sSubNoise, [], ...
        'freqlist', freqs_notch, ...
        'sensortypes', 'MEG, EEG', ...
        'read_all', 1);
    
    % Process: High-pass:0.3Hz
    sFilesMEGNoise = bst_process('CallProcess', 'process_bandpass', ...
        sNoiseFilesNotch, [], ...
        'highpass', filt.highpass, ...
        'lowpass', filt.lowpass, ...
        'mirror', 0, ...
        'sensortypes', 'MEG, EEG', ...
        'read_all', 1);
    
            %% == 7) postProcessing PSD on sensors ===========================
    % Process: Power spectrum density (Welch)
    sFilesPSDpost = bst_process('CallProcess', 'process_psd', ...
        sFilesRESTING, [], ...
        'timewindow', [], ...
        'win_length', win_length, ...
        'win_overlap', win_overlap, ...
        'sensortypes', 'MEG, EEG', ...
        'edit', struct(...
        'Comment', 'Power', ...
        'TimeBands', [], ...
        'Freqs', [], ...
        'ClusterFuncTime', 'none', ...
        'Measure', 'power', ...
        'Output', 'all', ...
        'SaveKernel', 0));
    
    % Process: Snapshot: Frequency spectrum
    bst_process('CallProcess', 'process_snapshot', ...
        sFilesPSDpost, [], ...
        'target', 10, ...  % Frequency spectrum
        'modality', 1, ...  % MEG (All)
        'orient', 1, ...  % left
        'time', 0, ...
        'contact_time', [0, 0.1], ...
        'contact_nimage', 12, ...
        'threshold', 30, ...
        'comment', 'After filtering and EOG/ECG SSP');
 

    % Brainstorm gets confused when you do things with scripting, so
    % I'm reloading the database just in case
    db_reload_database('current')
    
    
    
end


%% run processes below once empty room is done


%% == Initiate Brainstorm and protocol setup =============================
clc; clear;

cd '/media/jdscasta/Jason_drive/brainstorm3'

if ~brainstorm('status')
    brainstorm nogui % If brainstorm ain't running, run it with no GUI
end

% Create protocol; if it already exists, load it
omProtocol.name = 'TWININGs';
if exist('/media/jdscasta/Elements/TWININGs/', 'file') == 7
    omProtocol.index = bst_get('Protocol', omProtocol.name);
    bst_set('iProtocol', omProtocol.index);
    
else
    gui_brainstorm('CreateProtocol', omProtocol.name, 0, 0);
end

%% == Parameters =========================================================
% MEG datasets storage
mydirMEG = '/media/jdscasta/Elements/hcp/data/';

% Dir to save progress report
mydirBST = '/media/jdscasta/Elements/hcp/';

% Dir of database
mydirDB = '/media/jdscasta/Elements/hcp/data/';

% Frequencies to filter with the noth (power line 60Hz and harmonics)
freqs_notch = [60, 120, 180, 240, 300, 360, 420, 480, 540, 600];


% Filters
filt.highpass = 0.3;
filt.lowpass = 0.; % 0: no filter

filter_low.deltaLow = 1.;
filter_high.deltaHigh = 4.;
filter_low.thetaLow = 4.;
filter_high.thetaHigh = 8.;
filter_low.alphaLow = 8.;
filter_high.alphaHigh = 13.;
filter_low.betaLow = 13.;
filter_high.betaHigh = 30.;
filter_low.gammaLow = 30.;
filter_high.gammaHigh = 50.;
filter_low.hgammaLow = 50.;
filter_high.hgammaHigh = 150.;

% Window length and overlap for PSD Welch method
win_length = 2; % sec
win_overlap = 50; % percentage


% .mat files include variables to arrange the atlas into Yeo's RSN
load('/media/jdscasta/Jason_drive/omega_data/dependencies/desikan_scale33.mat');
load('/media/jdscasta/Jason_drive/omega_data/dependencies/rsn_mapping_yeo.mat');

    
%% this loop will ONLy filter and compute ssps
%% Prepare iteration variables so the parfor can run
sSubjects = bst_get('ProtocolSubjects');
SubjectNames = {sSubjects.Subject.Name}';
nSubjects = (numel(SubjectNames)-2);

for iSubject=[1:95]
    tic

    
    % for iSession = 1:nSessions % Only analyzing session 1 for everyone!
    fprintf(['Now processing: ' SubjectNames{iSubject} '\n'])
    
    % Process: select data
    sData = bst_process('CallProcess', 'process_select_files_data', ...
        [], [], 'subjectname',  SubjectNames{});
    
    sData = bst_process('CallProcess', 'process_select_tag', ...
        sData, [], ...
        'tag', '5-Restin', ...
        'search', 1, ...
        'select', 1);  % Select only the files with the tag
    
    
    % Process: Refine registration
    sRefined = bst_process('CallProcess', ...
        'process_headpoints_refine', sData, []);
    
    % Process: Select file names with tag: rest
    sFilesR = bst_process('CallProcess', 'process_select_tag', ...
        sRefined, [], ...
        'tag', '5-Restin', ... % Differentiate from other files
        'search', 1, ... % 1: Filename, 2: Comments
        'select', 1);  % Select only the files with the tag
    
    
    % Process: Snapshot of Sensors/MRI registration (goes into report)
    bst_process('CallProcess', 'process_snapshot', ...
        sFilesR, [], ...
        'target', 1, ...  % Sensors/MRI registration
        'modality', 1, ...% MEG (All)
        'orient', 1, ...  % left
        'time', 0, ...
        'contact_time', [0, 0.1], ...
        'contact_nimage', 12, ...
        'threshold', 30, ...
        'comment', '');
    

    
    %% == 5) Filtering: Line noise and high pass =====================
    % Process: Notch filter(60Hz + 10 Harmonics)
    sFilesNotch = bst_process('CallProcess', 'process_notch', ...
        sFilesR, [], ...
        'freqlist', freqs_notch, ...
        'sensortypes', 'MEG, EEG', ...
        'read_all', 0);
    
    % Process: High-pass:0.3Hz
    sFilesMEG = bst_process('CallProcess', 'process_bandpass', ...
        sFilesNotch, [], ...
        'highpass', filt.highpass, ...
        'lowpass', filt.lowpass, ...
        'mirror', 0, ...
        'sensortypes', 'MEG, EEG', ...
        'read_all', 0);
    
    % Delete intermediate files (Notch)
    for iRun=1:numel(sFilesNotch)
        % Process: Delete data files
        bst_process('CallProcess', 'process_delete', ...
            sFilesNotch(iRun).FileName, [], ...
            'target', 2);  % Delete conditions
    end
    
        % Brainstorm gets confused when you do things with scripting, so
    % I'm reloading the database just in case
    db_reload_database('current')
    
    
    
    %% == 6) SSP: EOG and ECG ========================================
    % Process: Select file names with tag: resting
    sFilesRESTING = bst_process('CallProcess', 'process_select_tag', ...
        sFilesMEG, [], ...
        'tag', '5-Restin', ...
        'search', 1, ...
        'select', 1);  % Select only the files with the tag
    
    
    % SSP detect and remove blinks per run
    for iRun=1:numel(sFilesRESTING)
        % Read the channel file
        ChannelMat = in_bst_channel(sFilesRESTING(iRun).ChannelFile);
        
        % Look for ECG channel
        iChannelECG = channel_find(ChannelMat.Channel, 'ECG-');
        
        % Look for EOG channel
        iChannelVEOG = channel_find(ChannelMat.Channel, 'VEOG+');
        
        % Process: Detect heartbeats
        if ~isempty(iChannelECG)
            bst_process('CallProcess', 'process_evt_detect_ecg', ...
                sFilesRESTING(iRun), [], ...
                'channelname', ChannelMat.Channel(iChannelECG).Name,...
                'timewindow', [], ...
                'eventname', 'cardiac');
        else
            disp('No ECG channel found!')
        end
        
        % Process: Detect eye blinks
        if ~isempty(iChannelVEOG)
            bst_process('CallProcess', 'process_evt_detect_eog', ...
                sFilesRESTING(iRun), [], ...
                'channelname', ChannelMat.Channel(iChannelVEOG).Name, ...
                'timewindow', [], ...
                'eventname', 'blink');
        else
            disp('No EOG channel found!')
        end
    end
    
    % Process: Remove simultaneous (keep blinks over heart beats)
    bst_process('CallProcess', 'process_evt_remove_simult', ...
        sFilesRESTING, [], ...
        'remove', 'cardiac', ...
        'target', 'blink', ...
        'dt', 0.25, ...
        'rename', 0);
    
    % Process: SSP ECG (cardiac) force remove 1st component
    bst_process('CallProcess', 'process_ssp_ecg', ...
        sFilesRESTING, [], ...
        'eventname', 'cardiac', ...
        'sensortypes', 'MEG', ...
        'usessp', 1, ...
        'select', 1);
    
    % Process: SSP EOG (blink) force remove 1st component
    bst_process('CallProcess', 'process_ssp_eog', ...
        sFilesRESTING, [], ...
        'eventname', 'blink', ...
        'sensortypes', 'MEG', ...
        'usessp', 1, ...
        'select', 1);
    
    % Process: Snapshot: SSP projectors
    bst_process('CallProcess', 'process_snapshot', ...
        sFilesRESTING, [], ...
        'target', 2, ...  % SSP projectors
        'modality', 1, ...  % MEG (All)
        'orient', 1, ...  % left
        'time', 0, ...
        'contact_time', [0, 0.1], ...
        'contact_nimage', 12, ...
        'threshold', 30, ...
        'comment', '');
    

    
    %% == 8) SSP: Sacades and EMG ====================================
    % Process: Detect other artifacts (mark noisy segments)
    bst_process('CallProcess', 'process_evt_detect_badsegment', ...
        sFilesRESTING, [], ...
        'timewindow', [], ...
        'sensortypes', 'MEG, EEG', ...
        'threshold', 3, ...  % 3
        'isLowFreq', 1, ...
        'isHighFreq', 1);
    
    % Process: SSP for low frequencies (saccades) 1 - 7 Hz (remove 1st)
    bst_process('CallProcess', 'process_ssp', ...
        sFilesRESTING, [], ...
        'timewindow',  [], ...
        'eventname',   '1-7Hz', ...
        'eventtime',   [], ...
        'bandpass',    [1, 7], ...
        'sensortypes', 'MEG', ...
        'usessp',      1, ...
        'saveerp',     0, ...
        'method',      1, ...  % PCA: One component per sensor
        'select',      1);
    
    % Process: SSP for high frequencies (muscle) 40 - 400 Hz (remove 1st)
    bst_process('CallProcess', 'process_ssp', ...
        sFilesRESTING, [], ...
        'timewindow',  [], ...
        'eventname',   '', ...
        'eventtime',   [], ...
        'bandpass',    [40, 400], ...
        'sensortypes', 'MEG', ...
        'usessp',      1, ...
        'saveerp',     0, ...
        'method',      1, ...  % PCA: One component per sensor
        'select',      1);
    
    % Brainstorm gets confused when you do things with scripting, so
    % I'm reloading the database just in case
    db_reload_database('current')
    
    
    
            %% == 7) postProcessing PSD on sensors ===========================
    % Process: Power spectrum density (Welch)
    sFilesPSDpost = bst_process('CallProcess', 'process_psd', ...
        sFilesRESTING, [], ...
        'timewindow', [], ...
        'win_length', win_length, ...
        'win_overlap', win_overlap, ...
        'sensortypes', 'MEG, EEG', ...
        'edit', struct(...
        'Comment', 'Power', ...
        'TimeBands', [], ...
        'Freqs', [], ...
        'ClusterFuncTime', 'none', ...
        'Measure', 'power', ...
        'Output', 'all', ...
        'SaveKernel', 0));
    
    % Process: Snapshot: Frequency spectrum
    bst_process('CallProcess', 'process_snapshot', ...
        sFilesPSDpost, [], ...
        'target', 10, ...  % Frequency spectrum
        'modality', 1, ...  % MEG (All)
        'orient', 1, ...  % left
        'time', 0, ...
        'contact_time', [0, 0.1], ...
        'contact_nimage', 12, ...
        'threshold', 30, ...
        'comment', 'After filtering and EOG/ECG SSP');
 

    % Brainstorm gets confused when you do things with scripting, so
    % I'm reloading the database just in case
    db_reload_database('current')
    
end




%% will now segment the data into 30 second chunck for source imaging 

%% == Initiate Brainstorm and protocol setup =============================
clc; clear;

cd '/export03/data/brainstorm3/'
addpath('/export03/data/brainstorm3/')

if ~brainstorm('status')
    brainstorm nogui % If brainstorm ain't running, run it with no GUI
end

% Create protocol; if it already exists, load it
omProtocol.name = 'TWININGs';
if exist('/media/jdscasta/Elements1/TWININGs/', 'file') == 7
    omProtocol.index = bst_get('Protocol', omProtocol.name);
    bst_set('iProtocol', omProtocol.index);
    
else
    gui_brainstorm('CreateProtocol', omProtocol.name, 0, 0);
end

%% == Parameters =========================================================
% MEG datasets storage
mydirMEG = '/media/jdscasta/Elements/hcp/data/';

% Dir to save progress report
mydirBST = '/media/jdscasta/Elements/hcp/';

% Dir of database
mydirDB = '/media/jdscasta/Elements/hcp/data/';

% Frequencies to filter with the noth (power line 60Hz and harmonics)
freqs_notch = [60, 120, 180, 240, 300, 360, 420, 480, 540, 600];


% Filters
filt.highpass = 0.3;
filt.lowpass = 0.; % 0: no filter

filter_low.deltaLow = 1.;
filter_high.deltaHigh = 4.;
filter_low.thetaLow = 4.;
filter_high.thetaHigh = 8.;
filter_low.alphaLow = 8.;
filter_high.alphaHigh = 13.;
filter_low.betaLow = 13.;
filter_high.betaHigh = 30.;
filter_low.gammaLow = 30.;
filter_high.gammaHigh = 50.;
filter_low.hgammaLow = 50.;
filter_high.hgammaHigh = 150.;

% Window length and overlap for PSD Welch method
win_length = 2; % sec
win_overlap = 50; % percentage



%% Prepare iteration variables so the parfor can run
sSubjects = bst_get('ProtocolSubjects');
SubjectNames = {sSubjects.Subject.Name}';
nSubjects = (numel(SubjectNames)-3);

%% break recodrings up into 30 second chunks 
for iSubject=[1:95]
    
    for ii=1:8

    location = ['/media/jdscasta/Elements1/baddata/baddata/', SubjectNames{iSubject}, '/baddata/' SubjectNames{iSubject}, '_MEG_4-Restin_baddata_badchannels.txt'];
    MEG3Restinbaddatabadchannels = readtable(location);
    bad_chanles= cellstr(strrep(MEG3Restinbaddatabadchannels{end-1,:}, "'", ''));
 
    
    % for iSession = 1:nSessions % Only analyzing session 1 for everyone!
    fprintf(['Now processing: ' SubjectNames{iSubject} '\n'])
    
    % Process: select data
    sData = bst_process('CallProcess', 'process_select_files_data', ...
        [], [], 'subjectname',  SubjectNames{iSubject});
    
    sData = bst_process('CallProcess', 'process_select_tag', ...
        sData, [], ...
        'tag', '4-Restin_c_rfDC_notch_high', ...
        'search', 1, ...
        'select', 1);  % Select only the files with the tag
    
    % Mark bad channels
    bst_process('CallProcess', 'process_channel_setbad', sData, [], ...
                'sensortypes', bad_chanles);


    %% == 11) Data/Noise Covariance ==================================
        % Import both files into the database
        sFilesRESTING = bst_process('CallProcess', 'process_import_data_time', ...
            sData, [], ...
            'subjectname', SubjectNames{iSubject}, ...
            'condition',   ['Restin-2-' int2str(ii)], ...
            'timewindow',  [5+((ii-1)*30), 5+((ii)*30)], ...
            'split',       0, ...
            'ignoreshort', 0, ...
            'usectfcomp',  1, ...
            'usessp',      1, ...
            'freq',        [], ...
            'baseline',    []);
        
        if length(sFilesRESTING) >= 2
            
                            % Process: Delete selected files
                sFiles = bst_process('CallProcess', 'process_delete', sFilesRESTING(2), [], ...
                    'target', 1);  % Delete selected files
            
        end
        
        
% Process: Resample: 500Hz
sFilesRESTING = bst_process('CallProcess', 'process_resample', sFilesRESTING(1,1), [], ...
    'freq',      500, ...
    'overwrite', 1);

            % Process: select data
    sFilesMEGNoise = bst_process('CallProcess', 'process_select_files_data', ...
        [], [], 'subjectname',  SubjectNames{iSubject});
        
        
            sFilesMEGNoise = bst_process('CallProcess', 'process_select_tag', ...
        sFilesMEGNoise, [], ...
        'tag', 'emptyroom', ...
        'search', 1, ...
        'select', 1);  % Select only the files with the tag
        

        
        % Standardize the number of channels
        sFilesTEMP = bst_process('CallProcess', 'process_stdchan', ...
            {sFilesRESTING.FileName, ...
            sFilesMEGNoise.FileName}, [], ...
            'method',  1);  % Keep only the common channel names=> Remove all the others

        %sFilesRESTING = sFilesTEMP(1);
        %sFilesMEGNoise = sFilesTEMP(2);
        
        % Compute the data covariance
        sTime = load(file_fullpath(sFilesRESTING.FileName), 'Time');
        bst_process('CallProcess', 'process_noisecov', ...
            sFilesRESTING, [], ...
            'baseline',       [], ...
            'datatimewindow', [], ...
            'sensortypes',    'MEG', ...
            'target',         2, ...  % Data covariance
            'dcoffset',       1, ...  % Block by block
            'identity',       0, ...
            'copycond',       0, ...
            'copysubj',       0, ...
            'copymatch',      0, ...
            'replacefile',    1);  % Replace
        
        % Compute the noise covariance
        bst_process('CallProcess', 'process_noisecov', ...
            sFilesMEGNoise, [], ...
            'baseline',       [], ...
            'datatimewindow', [], ...
            'sensortypes',    'MEG', ...
            'target',         1, ...  % Noise covariance
            'dcoffset',       1, ...  % Block by block
            'identity',       0, ...
            'copycond',       0, ...
            'copysubj',       0, ...
            'copymatch',      0, ...
            'replacefile',    1);  % Replace

        source = ['/media/jdscasta/Elements1/TWININGs/data/' SubjectNames{iSubject} '/emptyroom/noisecov_full.mat'];
        destination = ['/media/jdscasta/Elements1/TWININGs/data/' SubjectNames{iSubject} '/', ['Restin-2-' int2str(ii)], '/'];
        copyfile(source, destination);

        
    % Brainstorm gets confused when you do things with scripting, so
    % I'm reloading the database just in case
    db_reload_database('current')
    
    %% == 12) Compute head model =====================================

        bst_process('CallProcess', 'process_headmodel',...
            sFilesRESTING, [], ...
            'Comment',     '', ...
            'sourcespace', 1, ...  % Cortex surface
            'volumegrid',  struct(...
            'Method',        'isotropic', ...
            'nLayers',       17, ...
            'Reduction',     3, ...
            'nVerticesInit', 4000, ...
            'Resolution',    0.005, ...
            'FileName',      ''), ...
            'meg',         3, ...  % Overlapping spheres
            'eeg',         1, ...  %
            'ecog',        1, ...  %
            'seeg',        1, ...  %
            'openmeeg',    struct(...
            'BemFiles',     {{}}, ...
            'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
            'BemCond',      [1, 0.0125, 1], ...
            'BemSelect',    [1, 1, 1], ...
            'isAdjoint',    0, ...
            'isAdaptative', 1, ...
            'isSplit',      0, ...
            'SplitLength',  4000));
    
    %% == 13) Inverse Modelling: dsmp =========================

               
       % Process: Compute sources [2018]
  sSrcRest =  bst_process('CallProcess', 'process_inverse_2018',...
            {sFilesRESTING.FileName}, [], ...
            'output',  1, ...  % Kernel only: shared
            'inverse', struct(...
            'Comment',        'PNAI: MEG', ...
            'InverseMethod',  'lcmv', ...
            'InverseMeasure', 'nai', ...
            'SourceOrient',   {{'fixed'}}, ...
            'Loose',          0.2, ...
            'UseDepth',       1, ...
            'WeightExp',      0.5, ...
            'WeightLimit',    10, ...
            'NoiseMethod',    'median', ...
            'NoiseReg',       0.1, ...
            'SnrMethod',      'rms', ...
            'SnrRms',         1e-06, ...
            'SnrFixed',       3, ...
            'ComputeKernel',  1, ...
            'DataTypes',      {{'MEG'}}));
    


        sSources = bst_process('CallProcess', 'process_select_files_results', ...
            [], [], ...
            'subjectname',   SubjectNames{iSubject}, ...
            'condition',     ['Restin-2-' int2str(ii)], ...
            'tag',           '', ...
            'includebad',    0, ...
            'includeintra',  0, ...
            'includecommon', 0);
        
        % Process: Power spectrum density (Welch)
sFiles = bst_process('CallProcess', 'process_psd', sSources, [], ...
    'timewindow',  [], ...
    'win_length',  2, ...
    'win_overlap', 50, ...
    'units',       'physical', ...  % Physical: U2/Hz
    'clusters',    {'Destrieux', {'G_Ins_lg_and_S_cent_ins L', 'G_Ins_lg_and_S_cent_ins R', 'G_and_S_cingul-Ant L', 'G_and_S_cingul-Ant R', 'G_and_S_cingul-Mid-Ant L', 'G_and_S_cingul-Mid-Ant R', 'G_and_S_cingul-Mid-Post L', 'G_and_S_cingul-Mid-Post R', 'G_and_S_frontomargin L', 'G_and_S_frontomargin R', 'G_and_S_occipital_inf L', 'G_and_S_occipital_inf R', 'G_and_S_paracentral L', 'G_and_S_paracentral R', 'G_and_S_subcentral L', 'G_and_S_subcentral R', 'G_and_S_transv_frontopol L', 'G_and_S_transv_frontopol R', 'G_cingul-Post-dorsal L', 'G_cingul-Post-dorsal R', 'G_cingul-Post-ventral L', 'G_cingul-Post-ventral R', 'G_cuneus L', 'G_cuneus R', 'G_front_inf-Opercular L', 'G_front_inf-Opercular R', 'G_front_inf-Orbital L', 'G_front_inf-Orbital R', 'G_front_inf-Triangul L', 'G_front_inf-Triangul R', 'G_front_middle L', 'G_front_middle R', 'G_front_sup L', 'G_front_sup R', 'G_insular_short L', 'G_insular_short R', 'G_oc-temp_lat-fusifor L', 'G_oc-temp_lat-fusifor R', 'G_oc-temp_med-Lingual L', 'G_oc-temp_med-Lingual R', 'G_oc-temp_med-Parahip L', 'G_oc-temp_med-Parahip R', 'G_occipital_middle L', 'G_occipital_middle R', 'G_occipital_sup L', 'G_occipital_sup R', 'G_orbital L', 'G_orbital R', 'G_pariet_inf-Angular L', 'G_pariet_inf-Angular R', 'G_pariet_inf-Supramar L', 'G_pariet_inf-Supramar R', 'G_parietal_sup L', 'G_parietal_sup R', 'G_postcentral L', 'G_postcentral R', 'G_precentral L', 'G_precentral R', 'G_precuneus L', 'G_precuneus R', 'G_rectus L', 'G_rectus R', 'G_subcallosal L', 'G_subcallosal R', 'G_temp_sup-G_T_transv L', 'G_temp_sup-G_T_transv R', 'G_temp_sup-Lateral L', 'G_temp_sup-Lateral R', 'G_temp_sup-Plan_polar L', 'G_temp_sup-Plan_polar R', 'G_temp_sup-Plan_tempo L', 'G_temp_sup-Plan_tempo R', 'G_temporal_inf L', 'G_temporal_inf R', 'G_temporal_middle L', 'G_temporal_middle R', 'Lat_Fis-ant-Horizont L', 'Lat_Fis-ant-Horizont R', 'Lat_Fis-ant-Vertical L', 'Lat_Fis-ant-Vertical R', 'Lat_Fis-post L', 'Lat_Fis-post R', 'Pole_occipital L', 'Pole_occipital R', 'Pole_temporal L', 'Pole_temporal R', 'S_calcarine L', 'S_calcarine R', 'S_central L', 'S_central R', 'S_cingul-Marginalis L', 'S_cingul-Marginalis R', 'S_circular_insula_ant L', 'S_circular_insula_ant R', 'S_circular_insula_inf L', 'S_circular_insula_inf R', 'S_circular_insula_sup L', 'S_circular_insula_sup R', 'S_collat_transv_ant L', 'S_collat_transv_ant R', 'S_collat_transv_post L', 'S_collat_transv_post R', 'S_front_inf L', 'S_front_inf R', 'S_front_middle L', 'S_front_middle R', 'S_front_sup L', 'S_front_sup R', 'S_interm_prim-Jensen L', 'S_interm_prim-Jensen R', 'S_intrapariet_and_P_trans L', 'S_intrapariet_and_P_trans R', 'S_oc-temp_lat L', 'S_oc-temp_lat R', 'S_oc-temp_med_and_Lingual L', 'S_oc-temp_med_and_Lingual R', 'S_oc_middle_and_Lunatus L', 'S_oc_middle_and_Lunatus R', 'S_oc_sup_and_transversal L', 'S_oc_sup_and_transversal R', 'S_occipital_ant L', 'S_occipital_ant R', 'S_orbital-H_Shaped L', 'S_orbital-H_Shaped R', 'S_orbital_lateral L', 'S_orbital_lateral R', 'S_orbital_med-olfact L', 'S_orbital_med-olfact R', 'S_parieto_occipital L', 'S_parieto_occipital R', 'S_pericallosal L', 'S_pericallosal R', 'S_postcentral L', 'S_postcentral R', 'S_precentral-inf-part L', 'S_precentral-inf-part R', 'S_precentral-sup-part L', 'S_precentral-sup-part R', 'S_suborbital L', 'S_suborbital R', 'S_subparietal L', 'S_subparietal R', 'S_temporal_inf L', 'S_temporal_inf R', 'S_temporal_sup L', 'S_temporal_sup R', 'S_temporal_transverse L', 'S_temporal_transverse R'}}, ...
    'scoutfunc',   3, ...  % PCA
    'win_std',     0, ...
    'edit',        struct(...
         'Comment',         'Scouts,Power', ...
         'TimeBands',       [], ...
         'Freqs',           [], ...
         'ClusterFuncTime', 'before', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0));

        
    end
         
        
end


%% project each 30 second onto defeault anatomy and the scout schaefer

%% == Initiate Brainstorm and protocol setup =============================
clc; clear;

cd '/export03/data/brainstorm3/'
addpath('/export03/data/brainstorm3/')

if ~brainstorm('status')
    brainstorm nogui % If brainstorm ain't running, run it with no GUI
end

% Create protocol; if it already exists, load it
omProtocol.name = 'TWININGs';
if exist('/media/jdscasta/Elements1/TWININGs/', 'file') == 7
    omProtocol.index = bst_get('Protocol', omProtocol.name);
    bst_set('iProtocol', omProtocol.index);
    
else
    gui_brainstorm('CreateProtocol', omProtocol.name, 0, 0);
end

%% == Parameters =========================================================
% MEG datasets storage
mydirMEG = '/media/jdscasta/Elements/hcp/data/';

% Dir to save progress report
mydirBST = '/media/jdscasta/Elements/hcp/';

% Dir of database
mydirDB = '/media/jdscasta/Elements/hcp/data/';

% Frequencies to filter with the noth (power line 60Hz and harmonics)
freqs_notch = [60, 120, 180, 240, 300, 360, 420, 480, 540, 600];


% Filters
filt.highpass = 0.3;
filt.lowpass = 0.; % 0: no filter

filter_low.deltaLow = 1.;
filter_high.deltaHigh = 4.;
filter_low.thetaLow = 4.;
filter_high.thetaHigh = 8.;
filter_low.alphaLow = 8.;
filter_high.alphaHigh = 13.;
filter_low.betaLow = 13.;
filter_high.betaHigh = 30.;
filter_low.gammaLow = 30.;
filter_high.gammaHigh = 50.;
filter_low.hgammaLow = 50.;
filter_high.hgammaHigh = 150.;

% Window length and overlap for PSD Welch method
win_length = 2; % sec
win_overlap = 50; % percentage



%% Prepare iteration variables so the parfor can run
sSubjects = bst_get('ProtocolSubjects');
SubjectNames = {sSubjects.Subject.Name}';
nSubjects = (numel(SubjectNames)-3);


for iSubject= [1:95] 
    
    for ii=1:8

    
    % for iSession = 1:nSessions % Only analyzing session 1 for everyone!
    fprintf(['Now processing: ' SubjectNames{iSubject} '\n'])
    
    % Process: select data
    sData = bst_process('CallProcess', 'process_select_files_data', ...
        [], [], 'subjectname',  SubjectNames{iSubject});
    
    
        sSources = bst_process('CallProcess', 'process_select_files_results', ...
            [], [], ...
            'subjectname',   SubjectNames{iSubject}, ...
            'condition',     ['Restin-3-' int2str(ii)], ...
            'tag',           '', ...
            'includebad',    0, ...
            'includeintra',  0, ...
            'includecommon', 0);
        

        
% Process: Power spectrum density (Welch)
sPSD = bst_process('CallProcess', 'process_psd', sSources, [], ...
    'timewindow',  [], ...
    'win_length',  2, ...
    'win_overlap', 50, ...
    'units',       'physical', ...  % Physical: U2/Hz
    'clusters',    [], ...
    'scoutfunc',   1, ...  % Mean
    'win_std',     0, ...
    'edit',        struct(...
         'Comment',         'Power', ...
         'TimeBands',       [], ...
         'Freqs',           [], ...
         'ClusterFuncTime', 'none', ...
         'Measure',         'power', ...
         'Output',          'all', ...
         'SaveKernel',      0));
     
     
                     % Process: Project on default anatomy: surface
sPSD = bst_process('CallProcess', 'process_project_sources', sPSD, [], ...
    'headmodeltype', 'surface');  % Cortex surface


% Process: Spatial smoothing (3.00)
sPSD = bst_process('CallProcess', 'process_ssmooth_surfstat', sPSD, [], ...
    'fwhm',      3, ...
    'overwrite', 1);


sOutput = bst_process('CallProcess', 'process_extract_scout', sPSD, [], ...
    'timewindow',     [], ...
    'scouts',         {'Schaefer_200_7net', {'Cont_Cing_1 L', 'Cont_Cing_1 R', 'Cont_Cing_2 L', 'Cont_Cing_2 R', 'Cont_OFC_1 L', 'Cont_PFCl_1 L', 'Cont_PFCl_1 R', 'Cont_PFCl_2 L', 'Cont_PFCl_2 R', 'Cont_PFCl_3 L', 'Cont_PFCl_3 R', 'Cont_PFCl_4 L', 'Cont_PFCl_4 R', 'Cont_PFCl_5 L', 'Cont_PFCl_5 R', 'Cont_PFCl_6 R', 'Cont_PFCl_7 R', 'Cont_PFCmp_1 R', 'Cont_PFCmp_2 R', 'Cont_PFCv_1 R', 'Cont_Par_1 L', 'Cont_Par_1 R', 'Cont_Par_2 L', 'Cont_Par_2 R', 'Cont_Par_3 L', 'Cont_Par_3 R', 'Cont_Temp_1 L', 'Cont_Temp_1 R', 'Cont_pCun_1 L', 'Cont_pCun_1 R', 'Default_PFC_1 L', 'Default_PFC_10 L', 'Default_PFC_11 L', 'Default_PFC_12 L', 'Default_PFC_13 L', 'Default_PFC_2 L', 'Default_PFC_3 L', 'Default_PFC_4 L', 'Default_PFC_5 L', 'Default_PFC_6 L', 'Default_PFC_7 L', 'Default_PFC_8 L', 'Default_PFC_9 L', 'Default_PFCdPFCm_1 R', 'Default_PFCdPFCm_2 R', 'Default_PFCdPFCm_3 R', 'Default_PFCdPFCm_4 R', 'Default_PFCdPFCm_5 R', 'Default_PFCdPFCm_6 R', 'Default_PFCdPFCm_7 R', 'Default_PFCv_1 R', 'Default_PHC_1 L', 'Default_Par_1 L', 'Default_Par_1 R', 'Default_Par_2 L', 'Default_Par_2 R', 'Default_Par_3 L', 'Default_Par_3 R', 'Default_Par_4 L', 'Default_Temp_1 L', 'Default_Temp_1 R', 'Default_Temp_2 L', 'Default_Temp_2 R', 'Default_Temp_3 L', 'Default_Temp_3 R', 'Default_Temp_4 L', 'Default_Temp_4 R', 'Default_Temp_5 L', 'Default_Temp_5 R', 'Default_pCunPCC_1 L', 'Default_pCunPCC_1 R', 'Default_pCunPCC_2 L', 'Default_pCunPCC_2 R', 'Default_pCunPCC_3 L', 'Default_pCunPCC_3 R', 'Default_pCunPCC_4 L', 'DorsAttn_FEF_1 L', 'DorsAttn_FEF_1 R', 'DorsAttn_FEF_2 L', 'DorsAttn_FEF_2 R', 'DorsAttn_Post_1 L', 'DorsAttn_Post_1 R', 'DorsAttn_Post_10 L', 'DorsAttn_Post_10 R', 'DorsAttn_Post_2 L', 'DorsAttn_Post_2 R', 'DorsAttn_Post_3 L', 'DorsAttn_Post_3 R', 'DorsAttn_Post_4 L', 'DorsAttn_Post_4 R', 'DorsAttn_Post_5 L', 'DorsAttn_Post_5 R', 'DorsAttn_Post_6 L', 'DorsAttn_Post_6 R', 'DorsAttn_Post_7 L', 'DorsAttn_Post_7 R', 'DorsAttn_Post_8 L', 'DorsAttn_Post_8 R', 'DorsAttn_Post_9 L', 'DorsAttn_Post_9 R', 'DorsAttn_PrCv_1 L', 'DorsAttn_PrCv_1 R', 'Limbic_OFC_1 L', 'Limbic_OFC_1 R', 'Limbic_OFC_2 L', 'Limbic_OFC_2 R', 'Limbic_OFC_3 R', 'Limbic_TempPole_1 L', 'Limbic_TempPole_1 R', 'Limbic_TempPole_2 L', 'Limbic_TempPole_2 R', 'Limbic_TempPole_3 L', 'Limbic_TempPole_3 R', 'Limbic_TempPole_4 L', 'SalVentAttn_FrOperIns_1 L', 'SalVentAttn_FrOperIns_1 R', 'SalVentAttn_FrOperIns_2 L', 'SalVentAttn_FrOperIns_2 R', 'SalVentAttn_FrOperIns_3 L', 'SalVentAttn_FrOperIns_3 R', 'SalVentAttn_FrOperIns_4 L', 'SalVentAttn_FrOperIns_4 R', 'SalVentAttn_Med_1 L', 'SalVentAttn_Med_1 R', 'SalVentAttn_Med_2 L', 'SalVentAttn_Med_2 R', 'SalVentAttn_Med_3 L', 'SalVentAttn_Med_3 R', 'SalVentAttn_PFCl_1 L', 'SalVentAttn_ParOper_1 L', 'SalVentAttn_ParOper_2 L', 'SalVentAttn_ParOper_3 L', 'SalVentAttn_PrC_1 R', 'SalVentAttn_TempOccPar_1 R', 'SalVentAttn_TempOccPar_2 R', 'SalVentAttn_TempOccPar_3 R', 'SomMot_1 L', 'SomMot_1 R', 'SomMot_10 L', 'SomMot_10 R', 'SomMot_11 L', 'SomMot_11 R', 'SomMot_12 L', 'SomMot_12 R', 'SomMot_13 L', 'SomMot_13 R', 'SomMot_14 L', 'SomMot_14 R', 'SomMot_15 L', 'SomMot_15 R', 'SomMot_16 L', 'SomMot_16 R', 'SomMot_17 R', 'SomMot_18 R', 'SomMot_19 R', 'SomMot_2 L', 'SomMot_2 R', 'SomMot_3 L', 'SomMot_3 R', 'SomMot_4 L', 'SomMot_4 R', 'SomMot_5 L', 'SomMot_5 R', 'SomMot_6 L', 'SomMot_6 R', 'SomMot_7 L', 'SomMot_7 R', 'SomMot_8 L', 'SomMot_8 R', 'SomMot_9 L', 'SomMot_9 R', 'Vis_1 L', 'Vis_1 R', 'Vis_10 L', 'Vis_10 R', 'Vis_11 L', 'Vis_11 R', 'Vis_12 L', 'Vis_12 R', 'Vis_13 L', 'Vis_13 R', 'Vis_14 L', 'Vis_14 R', 'Vis_15 R', 'Vis_2 L', 'Vis_2 R', 'Vis_3 L', 'Vis_3 R', 'Vis_4 L', 'Vis_4 R', 'Vis_5 L', 'Vis_5 R', 'Vis_6 L', 'Vis_6 R', 'Vis_7 L', 'Vis_7 R', 'Vis_8 L', 'Vis_8 R', 'Vis_9 L', 'Vis_9 R'}}, ...
    'scoutfunc',      1, ...  % Mean
    'concatenate',    1, ...
    'save',           1, ...
    'addrowcomment',  1, ...
    'addfilecomment', 1);

        
    end
         
        
end


